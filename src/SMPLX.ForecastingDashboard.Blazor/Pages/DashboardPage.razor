@page "/dashboard"
@using Blazorise.Charts
@using System.Globalization
@using SMPLX.ForecastingDashboard.Helpers
@using Microsoft.Extensions.Options
@using SMPLX.ForecastingDashboard.Blazor.ViewModels
@using SMPLX.ForecastingDashboard.Cases
@using SMPLX.ForecastingDashboard.ForecastData
@using SMPLX.ForecastingDashboard.Settings
@inherits DashboardViewModel

@inject IJSRuntime JS
@inject IOptions<GeologicalOptions> GeoOptions
@inject ICaseAppService CaseAppService

<Tabs SelectedTab="@selectedTab" SelectedTabChanged="@OnSelectedTabChanged">
    <Items>
        <Tab Name="heatmap">@L["HeatMap"]</Tab>
        <Tab Name="charts">@L["AnalysisCharts"]</Tab>
    </Items>
    <Content>
        <TabPanel Name="charts">
            <div class="d-flex flex-row mt-2 mb-2 p-2 bg-dark">
                <div class="mr-2">
                    <Button Color="Color.Primary" Clicked="@(async () => await HandleChartDraw())">
                        <Icon Name="IconName.SyncAlt"/> Refresh Chart
                    </Button>
                </div>
                <div class="mr-2">
                    <div class="row align-middle">
                        <div class="col-sm-auto">
                            <Label TextColor="TextColor.Light">Range: </Label>
                        </div>
                        <div class="col-sm-auto">
                            <DateRangePicker class="" @ref="chartsDateRangePicker" MinDate="OldestRecordDate" MaxDate="DateTimeOffset.Now" OnRangeSelect="OnChartsRangeSelect" Ranges="DateRanges"/>
                        </div>
                    </div>
                </div>
            </div>
            @*
            <Button Clicked="@(async () => await HandleNextYearForecast())">Forecast Next Year</Button>*@
            <Row Gutter="(20,20)">
                <Column class="col-lg-12 text-center">
                    <h2>@L["DashboardTitle"]</h2>
                </Column>
                <Column Class="col-lg-6">
                    <Card>
                        <CardHeader>
                            <Row Class="justify-content-between">
                                <Column ColumnSize="ColumnSize.IsAuto">
                                    <b>
                                        @LinearRegressionChartTitle
                                    </b>
                                </Column>
                                <Column ColumnSize="ColumnSize.IsAuto">
                                    <Tooltip Text="@L["Expand"]">
                                        <Button Clicked="@(async () => await ShowLFModal())">
                                            <i class="fas fa-expand"></i>
                                        </Button>
                                    </Tooltip>
                                </Column>
                            </Row>
                        </CardHeader>
                        <LineChart @ref="LinearRegressionChart" TItem="double"/>
                    </Card>
                </Column>
                <Column Class="col-lg-6">
                    <Card>
                        <CardHeader>
                            <b>
                                @SeasonalTrendChartTitle
                            </b>
                        </CardHeader>
                        <LineChart @ref="SeasonalTrendChart" TItem="double"/>
                    </Card>
                </Column>
            </Row>
            <Row Gutter="(20,20)">
                <Column Class="col-lg-6">
                    <Card>
                        <CardHeader>
                            <b>@L["BarangayCaseChart"]</b>
                        </CardHeader>
                        <CardBody>
                            <PieChart TItem="double"></PieChart>
                        </CardBody>
                    </Card>
                </Column>
                <Column Class="col-lg-6">
                    <Card>
                        <CardHeader>
                            <b>@L["GenderChart"]</b>
                        </CardHeader>
                        <CardBody>
                            <PieChart @ref="GenderChart" TItem="int"></PieChart>
                        </CardBody>
                    </Card>
                </Column>
            </Row>
            <Row Gutter="(20,20)">
                <Column Class="col-lg-6">
                    <Card>
                        <CardHeader>
                            <b>@L["AgeChart"]</b>
                        </CardHeader>
                        <CardBody>
                            <BarChart TItem="double"></BarChart>
                        </CardBody>
                    </Card>
                </Column>
                <Column Class="col-lg-6">
                    <Card>
                        <CardHeader>
                            <b>@L["LifeStatusChart"]</b>
                        </CardHeader>
                        <CardBody>
                            <BarChart TItem="double"></BarChart>
                        </CardBody>
                    </Card>
                </Column>
            </Row>
        </TabPanel>
        <TabPanel Name="heatmap">
            <Card>
                <Row class="mt-2">
                    <Column ColumnSize="ColumnSize.IsAuto">
                        <p class="mt-1 ml-1">@L["FetchRangeDate"]</p>
                    </Column>
                    <Column ColumnSize="ColumnSize.IsAuto">
                        <DateRangePicker @ref="heatmapDateRangePicker" MinDate="OldestRecordDate" MaxDate="DateTimeOffset.Now" OnRangeSelect="OnHeatmapRangeSelect" Ranges="DateRanges"/>
                    </Column>
                </Row>
                <RadzenProgressBar class="mt-0 mb-0" Visible="@IsMapLoading"
                                   Style="height: 10px;border-radius: 0;"
                                   Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate"/>
                <div id="hmap" style="height:650px;"></div>
            </Card>
        </TabPanel>
    </Content>
</Tabs>
<Modal @ref="LinearForecastModal">
    <ModalBackdrop/>
    <ModalContent Size="ModalSize.ExtraLarge" Centered="true">
        <ModalHeader>
            <ModalTitle>
                @L["LinearTrendForecast"]
            </ModalTitle>
            <CloseButton/>
        </ModalHeader>
        <ModalBody>
            <LineChart @ref="lineChart_modal" TItem="double"/>
        </ModalBody>
        @* <ModalFooter> *@
        @*     <Button Color="Color.Secondary" Clicked="@(async () => await HideLFModal())">Close</Button> *@
        @* </ModalFooter> *@
    </ModalContent>
</Modal>

@code {
    string selectedTab = "heatmap";
    bool IsMapLoading;
    Modal LinearForecastModal;
    DateRangePicker heatmapDateRangePicker;
    DateRangePicker chartsDateRangePicker;
    // LineChart<double> lineChart;
    LineChart<double> lineChart_modal;
    DateRange chartDateRange;

    LineChart<double> LinearRegressionChart;
    string LinearRegressionChartTitle;
    LineChart<double> SeasonalTrendChart;
    string SeasonalTrendChartTitle;
    PieChart<int> GenderChart;

    Dictionary<string, DateRange> DateRanges => new()
    {
        {
            "Overall History", new DateRange
            {
                Start = OldestRecordDate,
                End = DateTime.Now
            }
        },
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
    // await DrawLinearRegressionChart();
    // await DrawSeasonalityTrendChart();
    // await HandleRedraw();
        }
        await DrawHeatMap();
        await HandleChartDraw();
    }

    private async Task DrawHeatMap(DateRange dr = null)
    {
        IsMapLoading = true;
        var heatData = ObjectMapper.Map<List<Location>, List<HeatMapDto>>(GeoOptions.Value.Barangays);
        if (dr == null)
        {
            dr = new DateRange {End = DateTimeOffset.Now, Start = OldestRecordDate};
        }
        if (Cases == null || Cases.Count < 1) return;
        var cases = Cases.Where(_ => _.DateRegistered >= dr.Start && _.DateRegistered <= dr.End)
            .GroupBy(_ => _.Barangay)
            .Select(_ => new LocationCasesDto {Name = _.First().Barangay, Count = _.Count()}).ToList();

        heatData.ForEach(d => { d.Count = cases.Where(_ => FlatMatch(_.Name, d.Name)).Sum(_ => _.Count); });
        try
        {
            await JS.InvokeVoidAsync("initMap", heatData);
        }
        catch (Exception ex)
        {
            HandleErrorAsync(ex);
        }
        IsMapLoading = false;
    }

    private async Task OnHeatmapRangeSelect(DateRange dr)
    {
        await DrawHeatMap(dr);
    }

    private async Task OnChartsRangeSelect(DateRange dr)
    {
        await DrawLinearRegressionChart(dr);
        await DrawSeasonalityTrendChart(dr);
        await DrawGenderChart(dr);
    }

    private async Task OnSelectedTabChanged(string arg)
    {
        selectedTab = arg;
        if (arg == "charts")
        {
        }
    }

    async Task DrawLinearRegressionChart(DateRange dr = null)
    {
        if (dr == null)
        {
            dr = new DateRange {End = OldestRecordDate.AddYears(1), Start = OldestRecordDate};
        }
        var accumulated = await GetAccumulatedCasesAsync(dr, RangeStep.Monthly);
        var linear = await GetLinearTrendAsync(dr, RangeStep.Monthly);
        LinearRegressionChartTitle = $"Linear Trend Forecast ({DateRangeToString(dr)})";
        await LinearRegressionChart.Clear();
        await LinearRegressionChart.AddLabelsDatasetsAndUpdate(accumulated.Labels, accumulated.Datasets);
        await LinearRegressionChart.AddDatasetsAndUpdate(linear.Datasets);
    }

    async Task DrawSeasonalityTrendChart(DateRange dr = null)
    {
        if (dr == null)
        {
            dr = new DateRange {End = OldestRecordDate.AddYears(1), Start = OldestRecordDate};
        }
        var accumulated = await GetAccumulatedCasesAsync(dr, RangeStep.Monthly);
        var seasonality = await GetSeasonalityTrendAsync(dr, RangeStep.Monthly);

    // SeasonalTrendChart.Options = new LineChartOptions
    // {
    //     Responsive = true,
    //     MaintainAspectRatio = false,
    //     Animation = new Animation(){Duration = 0},
    //     ResponsiveAnimationDuration = 0
    // };
        SeasonalTrendChartTitle = $"Linear Trend Forecast ({DateRangeToString(dr)})";
        await SeasonalTrendChart.Clear();

        await SeasonalTrendChart.AddLabelsDatasetsAndUpdate(accumulated.Labels, accumulated.Datasets);
    // await SeasonalTrendChart.Update();
        await SeasonalTrendChart.AddDatasetsAndUpdate(seasonality.Datasets);
    // await SeasonalTrendChart.Update();
    }

    async Task DrawGenderChart(DateRange dr = null)
    {
        if (dr == null)
        {
            dr = new DateRange {End = OldestRecordDate.AddYears(1), Start = OldestRecordDate};
        }
        var gdata = await GetGenderChartData(dr, RangeStep.Monthly);
        await GenderChart.Clear();
        await GenderChart.AddLabelsDatasetsAndUpdate(new[] {"Male", "Female"},gdata.Datasets);
    }

    string DateRangeToString(DateRange dr)
    {
        return dr.Start.Date.ToShortDateString() + " - " + dr.End.Date.ToShortDateString();
    }

    async Task HandleChartDraw()
    {
        await DrawLinearRegressionChart();
        await DrawSeasonalityTrendChart();
        await DrawGenderChart();
    }

    async Task HandleRedraw()
    {
        await LinearRegressionChart.Clear();
        await lineChart_modal.Clear();
        await SeasonalTrendChart.Clear();

        var months = Enumerable.Range(1, 12).Select(i => DateTimeFormatInfo.CurrentInfo.GetMonthName(i)).ToArray();
        var datasets = new List<Case>
        {
            new(1, 2019, "January", 10),
            new(2, 2019, "February", 12),
            new(3, 2019, "March", 7),
            new(4, 2019, "April", 5),
            new(5, 2019, "May", 9),
            new(6, 2019, "June", 100),
            new(7, 2019, "July", 150),
            new(8, 2019, "August", 200),
            new(9, 2019, "September", 123),
            new(10, 2019, "October", 78),
            new(11, 2019, "November", 15),
            new(12, 2019, "December", 9),
            new(13, 2020, "January", 11),
            new(14, 2020, "February", 8),
            new(15, 2020, "March", 8),
            new(16, 2020, "April", 9),
            new(17, 2020, "May", 7),
            new(18, 2020, "June", 9),
            new(19, 2020, "July", 9),
            new(20, 2020, "August", 10),
            new(21, 2020, "September", 9),
            new(22, 2020, "October", 7),
            new(23, 2020, "November", 7),
            new(24, 2020, "December", 8),
        };
        var cases = datasets.Select(_ => _.TotalCases).ToArray();
        var periods = datasets.Select(_ => _.Period).ToArray();
        var intercept = MathUtil.Intercept(cases, periods);
        var slope = MathUtil.Slope(cases, periods);
        var sindex = months.ToDictionary(x => x,
            x => datasets.Where(m => m.Month == x).Select(_ => _.TotalCases).Average() / cases.Average());

    //var ltfs = datasets.Select(d => (intercept + slope * d.Period).RoundOff(2)).ToList();
    //var stfrs = datasets.Select(d => sindex[d.Month] * ltf).ToList();
        var stltf = datasets.Select(d =>
        {
            var ltf = (intercept + slope * d.Period).RoundOff(2);
            return (ltf, sindex[d.Month] * ltf);
        }).ToList();
        var labels = datasets.Select(_ => _.Month.Substring(0, 3) + " " + _.Year).ToArray();
        var accumulatedDatasets = GetAccumulatedDataset(datasets.Select(_ => _.TotalCases).ToList());
        await LinearRegressionChart.AddLabelsDatasetsAndUpdate(labels, accumulatedDatasets);
        await lineChart_modal.AddLabelsDatasetsAndUpdate(labels, accumulatedDatasets);
        await SeasonalTrendChart.AddLabelsDatasetsAndUpdate(labels, accumulatedDatasets);

        var nextYearMonths = months.Select(_ => _.Substring(0, 3) + " " + 2021).ToArray();
        var latestPeriod = datasets.Count;
        var ltfs = new List<double>();
        var sfts = new List<double>();
        foreach (var month in months)
        {
            latestPeriod++;

            var ltf = (intercept + slope * latestPeriod).RoundOff(2);
            ltfs.Add(ltf);
            sfts.Add(sindex[month] * ltf);
        }
        await LinearRegressionChart.AddLabels(nextYearMonths);
        await SeasonalTrendChart.AddLabels(nextYearMonths);
        await lineChart_modal.AddLabels(nextYearMonths);
        await LinearRegressionChart.AddDatasetsAndUpdate(GetLinearForecastDataset(stltf.Select(_ => _.Item1).Concat(ltfs).ToList()));
        await lineChart_modal.AddDatasetsAndUpdate(GetLinearForecastDataset(stltf.Select(_ => _.Item1).Concat(ltfs).ToList()));
        await SeasonalTrendChart.AddDatasetsAndUpdate(GetSeasonalForecastDataset(stltf.Select(_ => _.Item2).Concat(sfts).ToList()));

    // await lineChart.AddDatasetsAndUpdate(GetSeasonalForecastDataset(stltf.Count,sfts.ToList());
    // await lineChart.AddData(4,sfts.ToArray());
    }

    LineChartDataset<double> GetAccumulatedDataset(List<double> array)
    {
        return new LineChartDataset<double>
        {
            Label = "Accumulated Cases",
            Data = array,
            BackgroundColor = backgroundColors[0], //backgroundColors[new Random().Next(0, backgroundColors.Count)],// ChartColor.FromRgba(255, 99, 132, 0.2f),
            BorderColor = borderColors[0],
            Fill = true,
            PointRadius = 3,
            PointBackgroundColor = borderColors[0],
        };
    }

    LineChartDataset<double> GetLinearForecastDataset(List<double> array)
    {
        return new LineChartDataset<double>
        {
            Label = "Linear Trend Forecast",
            Data = array.Select(a => a < 0 ? a * -1 : a).ToList(),
            BackgroundColor = backgroundColors[1],
            BorderColor = borderColors[1],
            Fill = true,
            PointRadius = 2,
            PointBackgroundColor = borderColors[1],
            BorderDash = new List<int> {5, 2}
        };
    }

    LineChartDataset<double> GetSeasonalForecastDataset(List<double> array)
    {
    // var x = new List<double?>(skipCount);
    // array.ForEach(_=>x.Add(_));
        return new LineChartDataset<double>
        {
            Label = "Seasonal Trend Forecast",
            Data = array.Select(a => a < 0 ? a * -1 : a).ToList(), //new List<double>{0},
            BackgroundColor = backgroundColors[2], //backgroundColors[new Random().Next(0, backgroundColors.Count)],// ChartColor.FromRgba(255, 99, 132, 0.2f),
            BorderColor = borderColors[2],
            Fill = true,
            PointRadius = 3,
            PointBackgroundColor = borderColors[2],
        };
    }

    bool interpolationEnabled = true;
    List<string> backgroundColors = new List<string> {ChartColor.FromRgba(40, 142, 202, 0.2f), ChartColor.FromRgba(140, 94, 255, 0.0f), ChartColor.FromRgba(75, 192, 192, 0.0f)};
    List<string> borderColors = new List<string> {ChartColor.FromRgba(40, 142, 202, 1f), ChartColor.FromRgba(140, 94, 255, 1f), ChartColor.FromRgba(75, 192, 192, 1f)};
    string[] Labels = {"Red", "Blue", "Yellow", "Green", "Purple", "Orange"};


    private async Task ShowLFModal()
    {
        LinearForecastModal.Show();
    }

    private async Task HideLFModal()
    {
        LinearForecastModal.Hide();
    }

    public class LocationCasesDto
    {
        public string Name { get; set; }
        public double Count { get; set; }
    }

    public class Case
    {
        public string Month { get; set; }
        public int Year { get; set; }
        public double TotalCases { get; set; }
        public double Period { get; set; }

        public Case(double period, int year, string month, double totalCases)
        {
            Month = month;
            TotalCases = totalCases;
            Period = period;
            Year = year;
        }
    }

}