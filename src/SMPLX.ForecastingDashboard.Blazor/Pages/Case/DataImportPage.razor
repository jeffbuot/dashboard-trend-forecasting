@page "/Cases/DataImport"
@using SMPLX.ForecastingDashboard.Permissions
@using Microsoft.Extensions.Localization
@using SMPLX.ForecastingDashboard.Localization
@using System.IO
@using System.Text
@using Microsoft.AspNetCore.Hosting
@using Volo.Abp
@using System.Data
@using System.Globalization
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.Options
@using OfficeOpenXml
@using SMPLX.ForecastingDashboard.Cases
@using SMPLX.ForecastingDashboard.Common
@using SMPLX.ForecastingDashboard.Settings
@using Volo.Abp.Guids
@inject IWebHostEnvironment Environment
@inject IGuidGenerator GuidGenerator
@inject ICaseAppService CaseAppService
@inject IOptions<GeologicalOptions> GeoOptions
@inherits ForecastingDashboardComponentBase

@attribute [Authorize(ForecastingDashboardPermissions.Case.Default + ".Create")]

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["CasesDataImport"]</h2>
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <Alert Color="Color.Warning" @bind-Visible="@visible">
            <Heading Size="HeadingSize.Is4" TextColor="TextColor.Warning">
                <i class="fas fa-exclamation-circle"></i> @L["Important"]
                <CloseButton/>
            </Heading>
            <AlertDescription>
                @L["FormatNote"]
                @L["CaseIdNote"]
                @L["DateNote"]
                @L["GenderNote"]
                @L["StatusNote"]
                @L["ImportFormatWarningMessage"]
                <Card>
                    <CardBody>
                        <Table Narrow="true" Bordered="true">
                            <TableHeader>
                                <TableRow>
                                    <TableHeaderCell>Case Id</TableHeaderCell>
                                    <TableHeaderCell>Date Of Registration</TableHeaderCell>
                                    <TableHeaderCell>Age</TableHeaderCell>
                                    <TableHeaderCell>Gender</TableHeaderCell>
                                    <TableHeaderCell>Barangay</TableHeaderCell>
                                    <TableHeaderCell>Status</TableHeaderCell>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                <TableRow>
                                    <TableRowHeader>1</TableRowHeader>
                                    <TableRowCell>01 04 2021</TableRowCell>
                                    <TableRowCell>55</TableRowCell>
                                    <TableRowCell>M</TableRowCell>
                                    <TableRowCell>POBLACION II</TableRowCell>
                                    <TableRowCell>1</TableRowCell>
                                </TableRow>
                                <TableRow>
                                    <TableRowHeader>2</TableRowHeader>
                                    <TableRowCell>12 25 2021</TableRowCell>
                                    <TableRowCell>23</TableRowCell>
                                    <TableRowCell>F</TableRowCell>
                                    <TableRowCell>CAUSWAGAN</TableRowCell>
                                    <TableRowCell>0</TableRowCell>
                                </TableRow>
                            </TableBody>
                        </Table>
                    </CardBody>
                </Card>
            </AlertDescription>
        </Alert>

        <div class="d-flex">
            <div class="p-2">
                <Button Color="Color.Primary" Clicked="@InsertRow">
                    <i class="fas fa-plus-square"></i> @L["AddCase"]
                </Button>
            </div>
            <div class="mr-auto p-2">
                <label for="file-upload" class="custom-file-upload">
                    <i class="fas fa-file-excel"></i> Import Excel
                </label>
                <InputFile id="file-upload" style="display: none;" OnChange="@LoadFiles" accept=".xlsx"/>
            </div>
            <div class="p-2" hidden="@HideSaveIssues">
                <div class="before-save-error">
                    <Tooltip Text="@beforeSaveIssues">
                        <i class="fas fa-exclamation-triangle"></i>
                    </Tooltip>
                </div>
            </div>
            <div class="p-2">
                <Button Color="Color.Primary" Clicked="@SaveImport" Disabled="@isSaving">
                    @if (isSaving)
                    {
                        <SpinKit Type="SpinKitType.Chase" Size="20px" Color="#ffffff"/>
                    }
                    else
                    {
                        <i class="fas fa-save"></i>
                        @(" ")@L["Save"]
                    }
                </Button>
            </div>
        </div>
        <br/>
        <RadzenProgressBar class="mt-2 mb-2" Visible="@isLoading" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate"/>

        <RadzenDataGrid @ref="casesGrid" AllowFiltering="true" AllowPaging="true" PageSize="17" AllowSorting="true" EditMode="Radzen.DataGridEditMode.Single"
                        Data="@importedCases" TItem="CaseImportDto" RowUpdate="@OnUpdateRow" RowRender="@RowRender" RowCreate="@OnCreateRow">
            <Columns>
                <RadzenDataGridColumn TItem="CaseImportDto" Property="CaseId" Title="Case ID">
                    <Template Context="context">
                        @if (!string.IsNullOrEmpty(context.ErrorMessage))
                        {
                            <Tooltip Text="@context.ErrorMessage">
                                <i class="fas fa-exclamation-triangle"></i> @context.CaseId
                            </Tooltip>
                        }
                        else
                        {
                            @context.CaseId
                        }
                    </Template>
                    <EditTemplate Context="context">
                        <RadzenNumeric @bind-Value="context.CaseId" Min="0" Style="width:100%"/>
                    </EditTemplate>
                    
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Width="200px" TItem="CaseImportDto" Property="DateRegistered" Title="Date Of Registration">
                    <Template Context="context">
                        @context.DateRegistered.ToShortDateString()
                    </Template>
                    <EditTemplate Context="context">
                        <RadzenDatePicker @bind-Value="context.DateRegistered" Style="width:100%"/>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CaseImportDto" Property="Age" Title="Age">
                    <EditTemplate Context="context">
                        <RadzenNumeric @bind-Value="context.Age" Min="0" Style="width:100%"/>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CaseImportDto" Property="Gender" Title="Gender">
                    <Template Context="context">
                        @Enum.GetName(context.Gender)
                    </Template>
                    <EditTemplate Context="context">
                        <RadzenDropDown @bind-Value="context.Gender" Data="@genderEnumerable" ValueProperty="Gender" Style="width:100%">
                        </RadzenDropDown>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Width="240px" TItem="CaseImportDto" Property="Barangay" Title="Barangay">
                    <EditTemplate Context="context">
                        <RadzenAutoComplete @bind-Value="context.Barangay" Placeholder="@L["EnterBarangay"]" LoadData=@OnLoadSuggestedData Data=@SuggestedBarangays TextProperty="Name"/>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Width="140px" TItem="CaseImportDto" Property="LifeStatus" Title="Life Status">
                    <Template Context="context">
                        @Enum.GetName(context.LifeStatus)
                    </Template>
                    <EditTemplate Context="context">
                        <RadzenDropDown @bind-Value="context.LifeStatus" Data="@lifeStatusEnumerable" ValueProperty="LifeStatus" Style="width:100%">
                        </RadzenDropDown>
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="CaseImportDto" Context="context" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                    <Template Context="casedto">
                        <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(casedto))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="casedto">
                        <RadzenButton Icon="add" Size="ButtonSize.Small" Click="@((args) => SaveRow(casedto))">
                        </RadzenButton>
                        <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(casedto))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CaseImportDto" Context="context" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
                    <Template Context="casedto">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(casedto))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="casedto">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(casedto))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </CardBody>
</Card>

@code
{
    IEnumerable<Gender> genderEnumerable = Enum.GetValues(typeof(Gender)).Cast<Gender>();
    IEnumerable<LifeStatus> lifeStatusEnumerable = Enum.GetValues(typeof(LifeStatus)).Cast<LifeStatus>();
    bool visible = true;
    bool HasCreatePermission;
    bool isLoading;
    bool isEditingNewCase;
    bool isSaving;

    RadzenDataGrid<CaseImportDto> casesGrid;
    List<CaseImportDto> importedCases;
    string beforeSaveIssues;
    List<Location> SuggestedBarangays;
    List<Location> StaticSuggestedBarangays;

    bool HideSaveIssues
    {
        get => string.IsNullOrEmpty(beforeSaveIssues);
    }

    protected override async Task OnInitializedAsync()
    {
        importedCases = new List<CaseImportDto>();
        HasCreatePermission = await AuthorizationService.IsGrantedAsync(ForecastingDashboardPermissions.Case.Create);
        StaticSuggestedBarangays = GeoOptions.Value.Barangays;
    }

    private async Task OnLoadSuggestedData(LoadDataArgs args)
    {
        SuggestedBarangays = StaticSuggestedBarangays.Where(_ => _.Name.ToLower().Contains(args.Filter.ToLower())).ToList();
        InvokeAsync(StateHasChanged);
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            isLoading = true;
            isEditingNewCase = false;
            var trustedFileNameForFileStorage = Path.GetRandomFileName() + Path.GetExtension(e.File.Name);
            var dir = Path.Combine(Environment.ContentRootPath, Environment.EnvironmentName, "unsafe_uploads");
            var path = Path.Combine(dir, trustedFileNameForFileStorage);

            if (!Directory.Exists(dir))
            {
                Directory.CreateDirectory(dir);
            }
            await using (FileStream fs = File.Create(path))
            {
                await e.File.OpenReadStream().CopyToAsync(fs);
            }

            importedCases = await ReadExcelFile(path);
            File.Delete(path);
        }
        catch (Exception ex)
        {
            await HandleErrorAsync(new UserFriendlyException($"File: {e.File.Name} Error: {ex.Message}"));
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task<List<CaseImportDto>> ReadExcelFile(string filepath)
    {
        var result = new List<CaseImportDto>();
        var rowBeforeException = 0;
        var caseIdBeforeException = 0;
        try
        {
            using (var package = new ExcelPackage(new System.IO.FileInfo(filepath)))
            {
                var worksheet = package.Workbook.Worksheets[0];
                var caseIdIndex = FindIndexByName(new[] { nameof(CaseImportDto.CaseId) }, worksheet.Cells, worksheet.Dimension.End.Column);
                var dateRegIndex = FindIndexByName(new[] { nameof(CaseImportDto.DateRegistered), "dateofregistration" }, worksheet.Cells, worksheet.Dimension.End.Column);
                var ageIndex = FindIndexByName(new[] { nameof(CaseImportDto.Age) }, worksheet.Cells, worksheet.Dimension.End.Column);
                var genderIndex = FindIndexByName(new[] { nameof(CaseImportDto.Gender) }, worksheet.Cells, worksheet.Dimension.End.Column);
                var barangayIndex = FindIndexByName(new[] { nameof(CaseImportDto.Barangay) }, worksheet.Cells, worksheet.Dimension.End.Column);
                var statusIndex = FindIndexByName(new[] { nameof(CaseImportDto.LifeStatus), "status" }, worksheet.Cells, worksheet.Dimension.End.Column);
                for (int i = worksheet.Dimension.Start.Row + 1; i <= worksheet.Dimension.End.Row; i++)
                {
                    rowBeforeException = i;
                    var caseDto = new CaseImportDto { Id = GuidGenerator.Create() };
                    if (caseIdIndex >= 0 && worksheet.Cells[i, caseIdIndex].Value != null)
                    {
                        caseDto.CaseId = Int32.Parse(worksheet.Cells[i, caseIdIndex].Text);
                        caseIdBeforeException = caseDto.CaseId;
                    }
                    if (dateRegIndex >= 0 && worksheet.Cells[i, dateRegIndex].Value != null)
                    {
    // caseDto.DateRegistered = DateTime.FromOADate(Int64.Parse(.Value.ToString()));
                        var dmy = worksheet.Cells[i, dateRegIndex].Text.Split("/").Select(_ => Int32.Parse(_)).ToArray();
                        caseDto.DateRegistered = DateTime.ParseExact(worksheet.Cells[i, dateRegIndex].Text, "dd/MM/yyyy", CultureInfo.InvariantCulture); //new DateTime(dmy[2], dmy[0], dmy[1]); 
    //DateTime.ParseExact(worksheet.Cells[i, dateRegIndex].Text, "dd/MM/yyyy", CultureInfo.InvariantCulture); //(Int64.Parse(worksheet.Cells[i, dateRegIndex].Value.ToString()));
                    }
                    if (ageIndex >= 0 && worksheet.Cells[i, ageIndex].Value != null)
                    {
                        caseDto.Age = Int32.Parse(worksheet.Cells[i, ageIndex].Text);
                    }
                    if (genderIndex >= 0 && worksheet.Cells[i, genderIndex].Value != null)
                    {
                        caseDto.Gender = worksheet.Cells[i, genderIndex].Text.ToLower().StartsWith("m") ? Gender.Male : Gender.Female;
                    }
                    if (barangayIndex >= 0 && worksheet.Cells[i, barangayIndex].Value != null)
                    {
                        caseDto.Barangay = worksheet.Cells[i, barangayIndex].Text;
                    }
                    if (statusIndex >= 0 && worksheet.Cells[i, statusIndex].Value != null)
                    {
                        caseDto.LifeStatus = Int32.Parse(worksheet.Cells[i, statusIndex].Text) == 1 ? LifeStatus.Alive : LifeStatus.Dead;
                    }
                    result.Add(caseDto);
                }
            }
        }
        catch (Exception e)
        {
            await HandleErrorAsync(new UserFriendlyException($"On Row: {rowBeforeException}, Case Id: {caseIdBeforeException}\nError: {e.Message}"));
        }
        return result;
    }

    private int FindIndexByName(string[] nsearch, ExcelRange range, int endColumn, int row = 1)
    {
        nsearch = nsearch.Select(_ => _.Trim().ToLower().Replace(" ", "")).ToArray();
        for (int i = 1; i <= endColumn; i++)
        {
            if (nsearch.Any(_ => _ == range[row, i].Text.Trim().ToLower().Replace(" ", "")))
            {
                return i;
            }
        }
        return -1;
    }

    private void RowRender(RowRenderEventArgs<CaseImportDto> args)
    {
        if (!string.IsNullOrEmpty(args.Data.ErrorMessage))
        {
            args.Attributes.Add("style", $"background-color: #FFA5AB !important;");
        }
    }

    int i = 0;

    private async Task SaveImport()
    {
        if (importedCases.Count < 1) return;
        isSaving = true;
        beforeSaveIssues = await ValidateImportCasesAsync();
        if (!string.IsNullOrEmpty(beforeSaveIssues))
        {
            Message.Error(beforeSaveIssues, L["ValidationFailed"]);
        }
        else
        {
    //Save
            try
            {
                var inputList = importedCases.Select(c => ObjectMapper.Map<CaseDto, CaseInputDto>(c));
                await CaseAppService.CreateManyAsync(inputList);
                Message.Success(L["DataImportSuccess"]);
                importedCases.Clear();
            }
            catch (Exception e)
            {
                isSaving = false;
                await HandleErrorAsync(e);
            }
        }
        isSaving = false;
    }

    private async Task<string> ValidateImportCasesAsync()
    {
        string issues = "";
        int issuesCount = 0;
        var caseIds = importedCases.Select(_ => _.CaseId).ToArray();
        var dbCases = await CaseAppService.GetListAsync(new CaseGetListDto());
        var dbCaseIds = dbCases.Items.Select(_ => _.CaseId).ToArray();
        foreach (var icase in importedCases)
        {
    //If there is more than 1 instance of case id in existing list
            bool hasTableDuplicate = caseIds.Count(_ => _ == icase.CaseId) > 1;
    //If there is case id existing from database
            bool hasDbDuplicate = dbCaseIds.Any(_ => _ == icase.CaseId);
            if (hasTableDuplicate || hasDbDuplicate)
            {
                icase.ErrorMessage = hasTableDuplicate ? L["CaseIdDuplicateTable"] : L["CaseIdDuplicateDatabase"];
                issuesCount++;
                if (issuesCount < 5)
                {
                    issues += $"Issue unresolved on case id \"{icase.CaseId}\".<br/>";
                }
            }
            else
            {
                icase.ErrorMessage = "";
            }
        }
        issuesCount -= 4;
        if (issuesCount > 0)
        {
            issues += $"and {(issuesCount)} more...";
        }
        return issues;
    }

    void InsertRow()
    {
        if (!isEditingNewCase)
        {
            isEditingNewCase = true;
            casesGrid.InsertRow(new CaseImportDto
            {
                Id = GuidGenerator.Create(),
                CaseId = importedCases?.Count > 0 ? importedCases.Max(_ => _.CaseId) + 1 : 1,
                DateRegistered = DateTime.Now,
                LifeStatus = LifeStatus.Alive
            });
        }
    }

    void OnUpdateRow(CaseImportDto caseDto)
    {
        isEditingNewCase = false;
        var index = importedCases.FindIndex(_ => _.Id == caseDto.Id);
        if (index >= 0)
        {
            importedCases[index] = caseDto;
        }
    }

    void OnCreateRow(CaseImportDto caseDto)
    {
        isEditingNewCase = false;
        importedCases.Add(caseDto);
    }

    void SaveRow(CaseImportDto caseDto)
    {
        casesGrid.UpdateRow(caseDto);
    }

    void EditRow(CaseImportDto caseDto)
    {
        casesGrid.EditRow(caseDto);
    }

    void CancelEdit(CaseImportDto caseDto)
    {
        isEditingNewCase = false;
        casesGrid.CancelEditRow(caseDto);
    }

    async Task DeleteRow(CaseImportDto caseDto)
    {
        isEditingNewCase = false;
        var result = await Message.Confirm(L["ConfirmDeleteCase", caseDto.CaseId]);
        if (!result) return;
        if (importedCases.Contains(caseDto))
        {
            importedCases.Remove(caseDto);
            casesGrid.Reload();
        }
        else
        {
            casesGrid.CancelEditRow(caseDto);
        }
    }
}