@page "/Cases"
@using SMPLX.ForecastingDashboard.Cases
@using SMPLX.ForecastingDashboard.Common
@using SMPLX.ForecastingDashboard.Permissions
@using SMPLX.ForecastingDashboard.Settings
@using Volo.Abp
@using Microsoft.Extensions.Options
@using DevExpress.Data.Filtering
@using DevExpress.Blazor.Internal
@inherits ForecastingDashboardComponentBase
@inject NavigationManager NavigationManager
@inject ICaseAppService CaseAppService
@inject IOptions<GeologicalOptions> GeoOptions

<Card>
<CardHeader>
    <div class="d-flex">
        <div class="mr-auto p-2">
            <h2>@L["CasesRecord"]</h2>
        </div>
        <div class="p-2">
            <DxCheckBox @bind-Checked="@IsEditMode">
                @L["EditMode"]
            </DxCheckBox>
        </div>

        <div class="p-2">
            <Button Color="Color.Primary" Clicked="@RefreshGrid" Disabled="@IsGridLoading">
                <i class="fas fa-sync-alt"></i> @L["Refresh"]
            </Button>
        </div>
        @if (HasCreatePermission)
        {
            <div class="p-2">
                <Button Color="Color.Primary" Clicked="@ExcelImport">
                    <i class="fas fa-file-upload"></i> @L["ExcelImport"]
                </Button>
            </div>
            @if (IsEditMode)
            {
                <div class="p-2">
                    <Button Color="Color.Primary" Clicked="@InsertRow">
                        <i class="fas fa-plus-square"></i> @L["InsertNew"]
                    </Button>
                </div>
            }

                @* <div class="p-2"> 
                    @* <Button Color="Color.Primary" Clicked="@SaveChanges" Disabled="@IsSaving"> *@
                    @*     @if (IsSaving) *@
                    @*     { *@
                    @*         <SpinKit Type="SpinKitType.Chase" Size="20px" Color="#ffffff"/> *@
                    @*     } *@
                    @*     else *@
                    @*     { *@
                    @*         <i class="fas fa-save"></i> *@
                    @*         @(" ")@L["Save"] *@
                    @*     } *@
                    @* </Button> *@
                @* </div>*@
        }
    </div>
</CardHeader>
<CardBody>
    <RadzenProgressBar class="mt-2 mb-2" Visible="@IsGridLoading" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate"/>
    @if (IsEditMode)
    {
        <RadzenDataGrid @ref="CasesGrid" AllowFiltering="false" AllowPaging="true" PageSize="10" AllowSorting="true" EditMode="Radzen.DataGridEditMode.Single"
                        Data="@CasesDtoList" TItem="CaseImportDto" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow">
            <Columns>
                <RadzenDataGridColumn TItem="CaseImportDto" Property="CaseId" Title="Case ID">
                    <Template Context="context">
                        @if (!string.IsNullOrEmpty(context.ErrorMessage))
                        {
                            <Tooltip Text="@context.ErrorMessage">
                                <i class="fas fa-exclamation-triangle"></i> @context.CaseId
                            </Tooltip>
                        }
                        else
                        {
                            @context.CaseId
                        }
                    </Template>
                    <EditTemplate Context="context">
                        <RadzenNumeric @bind-Value="context.CaseId" Min="0" Style="width:100%"/>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Width="200px" TItem="CaseImportDto" Property="DateRegistered" Title="Date Of Registration">
                    <Template Context="context">
                        @context.DateRegistered.ToShortDateString()
                    </Template>
                    <EditTemplate Context="context">
                        <RadzenDatePicker @bind-Value="context.DateRegistered" Style="width:100%"/>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CaseImportDto" Property="Age" Title="Age">
                    <EditTemplate Context="context">
                        <RadzenNumeric @bind-Value="context.Age" Min="0" Style="width:100%"/>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="CaseImportDto" Property="Gender" Title="Gender">
                    <Template Context="context">
                        @Enum.GetName(context.Gender)
                    </Template>
                    <EditTemplate Context="context">
                        <RadzenDropDown @bind-Value="context.Gender" Data="@genderList" ValueProperty="Gender" Style="width:100%">
                        </RadzenDropDown>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Width="240px" TItem="CaseImportDto" Property="Barangay" Title="Barangay">
                    <EditTemplate Context="context">
                        <RadzenAutoComplete @bind-Value="context.Barangay" Placeholder="@L["EnterBarangay"]" LoadData=@OnLoadSuggestedData Data=@SuggestedBarangays TextProperty="Name"/>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Width="140px" TItem="CaseImportDto" Property="LifeStatus" Title="Life Status">
                    <Template Context="context">
                        @Enum.GetName(context.LifeStatus)
                    </Template>
                    <EditTemplate Context="context">
                        <RadzenDropDown @bind-Value="context.LifeStatus" Data="@lifeStatusList" ValueProperty="LifeStatus" Style="width:100%">
                        </RadzenDropDown>
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Width="140px" TItem="CaseImportDto" Property="Wellness" Title="Wellness">
                    <Template Context="context">
                        @Enum.GetName(context.Wellness)
                    </Template>
                    <EditTemplate Context="context">
                        <RadzenDropDown @bind-Value="context.Wellness" Data="@wellnessList" ValueProperty="Wellness" Style="width:100%">
                        </RadzenDropDown>
                    </EditTemplate>
                </RadzenDataGridColumn>
                @if (HasUpdatePermission)
                {
                    <RadzenDataGridColumn TItem="CaseImportDto" Context="context" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                        <Template Context="casedto">
                            <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(casedto))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="casedto">
                            <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow(casedto))">
                            </RadzenButton>
                            <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(casedto))">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                }
                @if (HasDeletePermission)
                {
                    <RadzenDataGridColumn TItem="CaseImportDto" Context="context" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="70px">
                        <Template Context="casedto">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(casedto))" @onclick:stopPropagation="true">
                            </RadzenButton>
                        </Template>
                        <EditTemplate Context="casedto">
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.Small" Click="@(args => DeleteRow(casedto))">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                }

            </Columns>
        </RadzenDataGrid>
    }
    else
    {
        <DxGrid
            Data="@CasesDtoList"
            ShowGroupPanel="true"
            ShowFilterRow="true"
            PagerNavigationMode="PagerNavigationMode.InputBox"
            PageSizeSelectorVisible="true"
            PageSizeSelectorAllRowsItemVisible="true"
            PageSizeSelectorItems="@(new int[] {10, 20, 30})">
            <Columns>
                <DxGridDataColumn FieldName="@nameof(CaseDto.CaseId)" MinWidth="80">
                    <FilterRowCellTemplate>
                        <DxSpinEdit Value="(int?) context.FilterRowValue"
                                    ValueChanged="(int? v) => context.FilterRowValue = v"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Never"/>
                    </FilterRowCellTemplate>
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="@nameof(CaseDto.DateRegistered)" Caption="Date Registered" MinWidth="100">
                    <FilterRowCellTemplate>
                        <DxDateEdit Date="(DateTime?) context.FilterRowValue"
                                    DateChanged="(DateTime? v) => context.FilterRowValue = v"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Never"/>
                    </FilterRowCellTemplate>
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="@nameof(CaseDto.Age)" MinWidth="80">
                    <FilterRowCellTemplate>
                        <DxComboBox @bind-Value="context.FilterCriteria"
                                    Data="AgeFilterIntervals" ValueFieldName="Criteria" TextFieldName="DisplayText"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"/>
                    </FilterRowCellTemplate>
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="@nameof(CaseDto.Gender)" MinWidth="80">
                    <FilterRowCellTemplate Context="filterContext">
                        @{
                            Gender? genderVal = (Gender?) filterContext.FilterRowValue;
                        }
                        <DxComboBox Value="genderVal"
                                    TData="Gender?"
                                    TValue="Gender?"
                                    Data="genderList"
                                    ValueChanged="gender => filterContext.FilterRowValue = gender"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"/>
                    </FilterRowCellTemplate>
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="@nameof(CaseDto.Barangay)" FilterRowOperatorType="GridFilterRowOperatorType.Contains" MinWidth="80"/>
                <DxGridDataColumn FieldName="@nameof(CaseDto.LifeStatus)" MinWidth="80">
                    <FilterRowCellTemplate Context="filterContext">
                        @{
                            LifeStatus? lifeStatusVal = (LifeStatus?) filterContext.FilterRowValue;
                        }
                        <DxComboBox Value="lifeStatusVal"
                                    TData="LifeStatus?"
                                    TValue="LifeStatus?"
                                    Data="lifeStatusList"
                                    ValueChanged="lifeStatus => filterContext.FilterRowValue = lifeStatus"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"/>
                    </FilterRowCellTemplate>
                </DxGridDataColumn>
                <DxGridDataColumn FieldName="@nameof(CaseDto.Wellness)" MinWidth="80">
                    <FilterRowCellTemplate Context="filterContext">
                        @{
                            Wellness? wellnessVal = (Wellness?) filterContext.FilterRowValue;
                        }
                        <DxComboBox Value="wellnessVal"
                                    TData="Wellness?"
                                    TValue="Wellness?"
                                    Data="wellnessList"
                                    ValueChanged="wellness => filterContext.FilterRowValue = wellness"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto"/>
                    </FilterRowCellTemplate>
                </DxGridDataColumn>
            </Columns>
        </DxGrid>
    }
</CardBody>
</Card>

@code {
    bool IsGridLoading;
    bool HasCreatePermission;
    bool HasDeletePermission;
    bool HasUpdatePermission;
    bool IsEditMode = false;
    RadzenDataGrid<CaseImportDto> CasesGrid;
    IEnumerable<Gender?> genderList = Enum.GetValues(typeof(Gender)).Cast<Gender?>();
    IEnumerable<LifeStatus?> lifeStatusList = Enum.GetValues(typeof(LifeStatus)).Cast<LifeStatus?>();
    IEnumerable<Wellness?> wellnessList = Enum.GetValues(typeof(Wellness)).Cast<Wellness?>();
    List<CaseImportDto> CasesDtoList;
    List<Location> SuggestedBarangays;
    List<Location> StaticSuggestedBarangays;
    List<string> SuggestedBaranggayFilter = new List<string>();

    static readonly IReadOnlyList<AgeFilterInterval> AgeFilterIntervals = new AgeFilterInterval[]
    {
        new("[Age] < 18", "< 18"),
        new("[Age] between (18, 30)", "18 to 30"),
        new("[Age] > 30", "> 30")
    };

    record AgeFilterInterval(CriteriaOperator Criteria, string DisplayText)
    {
        public AgeFilterInterval(string CriteriaText, string DisplayText)
            : this(CriteriaOperator.Parse(CriteriaText), DisplayText)
        {
        }
    }

    protected override async Task OnInitializedAsync()
    {
        HasCreatePermission = await AuthorizationService.IsGrantedAsync(ForecastingDashboardPermissions.Case.Create);
        HasDeletePermission = await AuthorizationService.IsGrantedAsync(ForecastingDashboardPermissions.Case.Delete);
        HasUpdatePermission = await AuthorizationService.IsGrantedAsync(ForecastingDashboardPermissions.Case.Edit);
        StaticSuggestedBarangays = GeoOptions.Value.Barangays;
        await LoadListData();
    }

    private async Task OnLoadSuggestedData(LoadDataArgs args)
    {
        SuggestedBarangays = StaticSuggestedBarangays.Where(_ => _.Name.ToLower().Contains(args.Filter.ToLower())).ToList();
        InvokeAsync(StateHasChanged);
    }

    private async Task LoadListData()
    {
        IsGridLoading = true;
        var list = await CaseAppService.GetListAsync(new CaseGetListDto());
        CasesDtoList = new List<CaseImportDto>(ObjectMapper.Map<IReadOnlyList<CaseDto>, IReadOnlyList<CaseImportDto>>(list.Items));
        IsGridLoading = false;
        SuggestedBaranggayFilter = CasesDtoList.Select(_ => _.Barangay).Distinct().ToList();
    }

    private async Task RefreshGrid()
    {
        await LoadListData();
    }

    private async Task ExcelImport()
    {
        NavigationManager.NavigateTo("/cases/dataimport");
    }

    private async Task InsertRow()
    {
        var newCase = new CaseImportDto()
        {
            CaseId = CasesDtoList?.Count > 0 ? CasesDtoList.Max(_ => _.CaseId) + 1 : 1,
            DateRegistered = DateTime.Now,
            LifeStatus = LifeStatus.Alive,
            Wellness = Wellness.NotCured
        };
        CasesGrid.InsertRow(newCase);
    }

    async Task SaveRow(CaseImportDto caseDto)
    {
        var issue = await ValidateImportCasesAsync(caseDto);
        if (!string.IsNullOrEmpty(issue))
        {
            Message.Error(issue);
            return;
        }
        CasesGrid.UpdateRow(caseDto);
    }

    private async Task OnUpdateRow(CaseImportDto caseDto)
    {
        try
        {
            await CaseAppService.UpdateAsync(caseDto.Id, ObjectMapper.Map<CaseImportDto, CaseInputDto>(caseDto));
            var index = CasesDtoList.FindIndex(_ => _.Id == caseDto.Id);
            if (index >= 0)
            {
                CasesDtoList[index] = caseDto;
            }
        }
        catch (Exception ex)
        {
            CasesGrid.CancelEditRow(caseDto);
            HandleErrorAsync(ex);
        }
    }

    private async Task OnCreateRow(CaseImportDto caseDto)
    {
        try
        {
            var dto = await CaseAppService.CreateAsync(ObjectMapper.Map<CaseImportDto, CaseInputDto>(caseDto));
            caseDto.Id = dto.Id;
            CasesDtoList.Add(caseDto);
        }
        catch (Exception ex)
        {
            CasesGrid.CancelEditRow(caseDto);
            HandleErrorAsync(ex);
        }
    }

    private async Task<string> ValidateImportCasesAsync(CaseImportDto caseDto)
    {
        var caseIds = CasesDtoList.Where(_ => _.Id != caseDto.Id).Select(_ => _.CaseId).ToArray();
        var dbCases = await CaseAppService.GetListAsync(new CaseGetListDto());
        var dbCaseIds = dbCases.Items.Where(_ => _.Id != caseDto.Id).Select(_ => _.CaseId).ToArray();
    //If there is more than 1 instance of case id in existing list
        bool hasTableDuplicate = caseIds.Count(_ => _ == caseDto.CaseId) > 1;
    //If there is case id existing from database
        bool hasDbDuplicate = dbCaseIds.Any(_ => _ == caseDto.CaseId);
        if (hasTableDuplicate || hasDbDuplicate)
        {
            return hasTableDuplicate ? L["CaseIdDuplicateTable"] : L["CaseIdDuplicateDatabase"];
        }

        return "";
    }

    private void EditRow(CaseImportDto caseDto)
    {
        CasesGrid.EditRow(caseDto);
    }

    private void CancelEdit(CaseImportDto caseDto)
    {
        CasesGrid.CancelEditRow(caseDto);
    }

    private async Task DeleteRow(CaseImportDto caseDto)
    {
        var result = await Message.Confirm(L["ConfirmDeleteCase", caseDto.CaseId]);
        if (!result) return;

        if (caseDto.Id != Guid.Empty)
        {
            try
            {
                await CaseAppService.DeleteAsync(caseDto.Id);
                CasesDtoList.Remove(caseDto);
                CasesGrid.Reload();
            }
            catch (Exception ex)
            {
                HandleErrorAsync(ex);
            }
        }
        else
        {
            CasesGrid.CancelEditRow(caseDto);
        }
    }

}