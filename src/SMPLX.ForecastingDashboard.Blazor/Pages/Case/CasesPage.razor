@page "/Cases"
@using SMPLX.ForecastingDashboard.Cases
@using SMPLX.ForecastingDashboard.Common
@using SMPLX.ForecastingDashboard.Permissions
@inject NavigationManager NavigationManager
@inherits AbpCrudPageBase<ICaseAppService, CaseDto, Guid, CaseGetListDto, CaseInputDto>

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["CasesRecord"]</h2>
            </Column>
            @if (HasCreatePermission)
            {
                <Column ColumnSize="ColumnSize.IsAuto">
                    <Row Class="justify-content-start">
                        <Column ColumnSize="ColumnSize.IsAuto" Class="p-1">
                            <Button Color="Color.Primary" Clicked="AddTestData">
                                <i class="fas fa-plus-square"></i> @L["AddCase"]
                            </Button>
                        </Column>
                        <Column ColumnSize="ColumnSize.IsAuto" Class="p-1">
                            <Dropdown>
                                <DropdownToggle Color="Color.Primary">
                                    <i class="fas fa-file-upload"></i> @L["ImportFrom"]
                                </DropdownToggle>
                                <DropdownMenu>
                                    <DropdownItem Clicked="ImportFromExcel">
                                        <i class="fas fa-file-excel"></i> @L["ImportFromExcel"]
                                    </DropdownItem>
                                    <DropdownDivider/>

                                    <DropdownItem Clicked="ImportFromCsv">
                                        <i class="fas fa-file-csv"></i> @L["ImportFromCsv"]
                                    </DropdownItem>
                                </DropdownMenu>
                            </Dropdown>
                        </Column>
                    </Row>
                </Column>
            }
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="CaseDto"
                  Data="Entities"
                  ReadData="OnDataGridReadAsync"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  Striped="true"
                  Filterable="true"
                  FilterMethod="DataGridFilterMethod.Contains"
                  PageSize="PageSize">
            <DataGridColumns>
                @if (HasDeletePermission || HasUpdatePermission)
                {
                    <DataGridEntityActionsColumn TItem="CaseDto" @ref="@EntityActionsColumn">
                        <DisplayTemplate>
                            <EntityActions TItem="CaseDto" EntityActionsColumn="@EntityActionsColumn">
                                @if (HasUpdatePermission)
                                {
                                    <EntityAction TItem="CaseDto"
                                                  Text="@L["Edit"]"
                                                  Clicked="() => OpenEditModalAsync(context)"/>
                                }

                                @if (HasDeletePermission)
                                {
                                    <EntityAction TItem="CaseDto"
                                                  Text="@L["Delete"]"
                                                  Clicked="() => DeleteEntityAsync(context)"
                                                  ConfirmationMessage="() => GetDeleteConfirmationMessage(context)">
                                    </EntityAction>
                                }

                            </EntityActions>
                        </DisplayTemplate>
                    </DataGridEntityActionsColumn>
                }
                <DataGridColumn TItem="CaseDto"
                                Field="@nameof(CaseDto.CaseId)"
                                Caption="@L["CaseId"]">
                </DataGridColumn>
                <DataGridColumn TItem="CaseDto"
                                Field="@nameof(CaseDto.DateRegistered)"
                                Caption="@L["DateRegistered"]">
                    <DisplayTemplate>
                        @context.DateRegistered.ToShortDateString()
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="CaseDto"
                                Field="@nameof(CaseDto.Age)"
                                Caption="@L["Age"]">
                </DataGridColumn>
                <DataGridColumn TItem="CaseDto"
                                Field="@nameof(CaseDto.Gender)"
                                Caption="@L["Gender"]">
                    <DisplayTemplate>
                        @Enum.GetName(context.Gender)
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="CaseDto"
                                Field="@nameof(CaseDto.Barangay)"
                                Caption="@L["Barangay"]">
                </DataGridColumn>
                <DataGridColumn TItem="CaseDto"
                                Field="@nameof(CaseDto.LifeStatus)"
                                Caption="@L["LifeStatus"]">
                    <DisplayTemplate>
                        @Enum.GetName(context.LifeStatus)
                    </DisplayTemplate>
                </DataGridColumn>
            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

@code {

    protected async Task AddTestData()
    {
        NewEntity = new CaseInputDto() { Age = 1, Barangay = "Test", CaseId = 1, DateRegistered = DateTime.Now, LifeStatus = LifeStatus.Alive };
        await CreateEntityAsync();
    }

    protected async Task Refresh()
    {
    // var result = await CaseAppService.GetListAsync(new CaseGetListDto());
    // CasesList = new List<CaseDto>(result.Items);
    }

    protected override async Task OnInitializedAsync()
    {
        HasCreatePermission = await AuthorizationService.IsGrantedAsync(ForecastingDashboardPermissions.Case.Create);
        HasDeletePermission = await AuthorizationService.IsGrantedAsync(ForecastingDashboardPermissions.Case.Delete);
        HasUpdatePermission = await AuthorizationService.IsGrantedAsync(ForecastingDashboardPermissions.Case.Edit);
    // CasesList = new List<CaseDto>();
    // await Refresh();
    }

    private async Task ImportFromExcel()
    {
    // throw new NotImplementedException();
    }

    private async Task ImportFromCsv()
    {
    // throw new NotImplementedException();
    }

}